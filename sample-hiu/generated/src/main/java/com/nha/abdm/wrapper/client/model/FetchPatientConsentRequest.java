/*
 * Swagger HIU Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nha.abdm.wrapper.client.model.FetchConsentRequest;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * FetchPatientConsentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-07T16:47:17.453937283Z[Etc/UTC]")
public class FetchPatientConsentRequest {
  public static final String SERIALIZED_NAME_PATIENT_ABHA_ADDRESS = "patientAbhaAddress";
  @SerializedName(SERIALIZED_NAME_PATIENT_ABHA_ADDRESS)
  private String patientAbhaAddress;

  public static final String SERIALIZED_NAME_FETCH_CONSENT_REQUEST = "fetchConsentRequest";
  @SerializedName(SERIALIZED_NAME_FETCH_CONSENT_REQUEST)
  private FetchConsentRequest fetchConsentRequest;

  public FetchPatientConsentRequest() {
  }

  public FetchPatientConsentRequest patientAbhaAddress(String patientAbhaAddress) {
    
    this.patientAbhaAddress = patientAbhaAddress;
    return this;
  }

   /**
   * Get patientAbhaAddress
   * @return patientAbhaAddress
  **/
  @javax.annotation.Nullable
  public String getPatientAbhaAddress() {
    return patientAbhaAddress;
  }


  public void setPatientAbhaAddress(String patientAbhaAddress) {
    this.patientAbhaAddress = patientAbhaAddress;
  }


  public FetchPatientConsentRequest fetchConsentRequest(FetchConsentRequest fetchConsentRequest) {
    
    this.fetchConsentRequest = fetchConsentRequest;
    return this;
  }

   /**
   * Get fetchConsentRequest
   * @return fetchConsentRequest
  **/
  @javax.annotation.Nullable
  public FetchConsentRequest getFetchConsentRequest() {
    return fetchConsentRequest;
  }


  public void setFetchConsentRequest(FetchConsentRequest fetchConsentRequest) {
    this.fetchConsentRequest = fetchConsentRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchPatientConsentRequest fetchPatientConsentRequest = (FetchPatientConsentRequest) o;
    return Objects.equals(this.patientAbhaAddress, fetchPatientConsentRequest.patientAbhaAddress) &&
        Objects.equals(this.fetchConsentRequest, fetchPatientConsentRequest.fetchConsentRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patientAbhaAddress, fetchConsentRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchPatientConsentRequest {\n");
    sb.append("    patientAbhaAddress: ").append(toIndentedString(patientAbhaAddress)).append("\n");
    sb.append("    fetchConsentRequest: ").append(toIndentedString(fetchConsentRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("patientAbhaAddress");
    openapiFields.add("fetchConsentRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FetchPatientConsentRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FetchPatientConsentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FetchPatientConsentRequest is not found in the empty JSON string", FetchPatientConsentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!FetchPatientConsentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FetchPatientConsentRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("patientAbhaAddress") != null && !jsonObj.get("patientAbhaAddress").isJsonNull()) && !jsonObj.get("patientAbhaAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patientAbhaAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patientAbhaAddress").toString()));
      }
      // validate the optional field `fetchConsentRequest`
      if (jsonObj.get("fetchConsentRequest") != null && !jsonObj.get("fetchConsentRequest").isJsonNull()) {
        FetchConsentRequest.validateJsonObject(jsonObj.getAsJsonObject("fetchConsentRequest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FetchPatientConsentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FetchPatientConsentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FetchPatientConsentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FetchPatientConsentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FetchPatientConsentRequest>() {
           @Override
           public void write(JsonWriter out, FetchPatientConsentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FetchPatientConsentRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FetchPatientConsentRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FetchPatientConsentRequest
  * @throws IOException if the JSON string is invalid with respect to FetchPatientConsentRequest
  */
  public static FetchPatientConsentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FetchPatientConsentRequest.class);
  }

 /**
  * Convert an instance of FetchPatientConsentRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

