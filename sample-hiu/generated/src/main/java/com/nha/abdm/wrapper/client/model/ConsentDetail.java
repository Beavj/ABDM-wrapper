/*
 * Swagger HIU Facade - OpenAPI 3.0
 * This is a set of interfaces based on the OpenAPI 3.0 specification for a wrapper client
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.nha.abdm.wrapper.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.nha.abdm.wrapper.client.model.ConsentCareContext;
import com.nha.abdm.wrapper.client.model.ConsentRequester;
import com.nha.abdm.wrapper.client.model.IdRequest;
import com.nha.abdm.wrapper.client.model.Permission;
import com.nha.abdm.wrapper.client.model.Purpose;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.nha.abdm.wrapper.client.invoker.JSON;

/**
 * ConsentDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-05T21:22:55.033887239Z[Etc/UTC]")
public class ConsentDetail {
  public static final String SERIALIZED_NAME_SCHEMA_VERSION = "schemaVersion";
  @SerializedName(SERIALIZED_NAME_SCHEMA_VERSION)
  private String schemaVersion;

  public static final String SERIALIZED_NAME_CONSENT_ID = "consentId";
  @SerializedName(SERIALIZED_NAME_CONSENT_ID)
  private String consentId;

  public static final String SERIALIZED_NAME_PATIENT = "patient";
  @SerializedName(SERIALIZED_NAME_PATIENT)
  private IdRequest patient;

  public static final String SERIALIZED_NAME_CARE_CONTEXTS = "careContexts";
  @SerializedName(SERIALIZED_NAME_CARE_CONTEXTS)
  private List<ConsentCareContext> careContexts;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private Purpose purpose;

  public static final String SERIALIZED_NAME_HIP = "hip";
  @SerializedName(SERIALIZED_NAME_HIP)
  private IdRequest hip;

  public static final String SERIALIZED_NAME_HIU = "hiu";
  @SerializedName(SERIALIZED_NAME_HIU)
  private IdRequest hiu;

  public static final String SERIALIZED_NAME_CONSENT_MANAGER = "consentManager";
  @SerializedName(SERIALIZED_NAME_CONSENT_MANAGER)
  private IdRequest consentManager;

  public static final String SERIALIZED_NAME_REQUESTER = "requester";
  @SerializedName(SERIALIZED_NAME_REQUESTER)
  private ConsentRequester requester;

  public static final String SERIALIZED_NAME_HI_TYPES = "hiTypes";
  @SerializedName(SERIALIZED_NAME_HI_TYPES)
  private List<String> hiTypes;

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private Permission permission;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private String signature;

  public ConsentDetail() {
  }

  public ConsentDetail schemaVersion(String schemaVersion) {
    
    this.schemaVersion = schemaVersion;
    return this;
  }

   /**
   * Get schemaVersion
   * @return schemaVersion
  **/
  @javax.annotation.Nullable
  public String getSchemaVersion() {
    return schemaVersion;
  }


  public void setSchemaVersion(String schemaVersion) {
    this.schemaVersion = schemaVersion;
  }


  public ConsentDetail consentId(String consentId) {
    
    this.consentId = consentId;
    return this;
  }

   /**
   * Get consentId
   * @return consentId
  **/
  @javax.annotation.Nullable
  public String getConsentId() {
    return consentId;
  }


  public void setConsentId(String consentId) {
    this.consentId = consentId;
  }


  public ConsentDetail patient(IdRequest patient) {
    
    this.patient = patient;
    return this;
  }

   /**
   * Get patient
   * @return patient
  **/
  @javax.annotation.Nullable
  public IdRequest getPatient() {
    return patient;
  }


  public void setPatient(IdRequest patient) {
    this.patient = patient;
  }


  public ConsentDetail careContexts(List<ConsentCareContext> careContexts) {
    
    this.careContexts = careContexts;
    return this;
  }

  public ConsentDetail addCareContextsItem(ConsentCareContext careContextsItem) {
    if (this.careContexts == null) {
      this.careContexts = new ArrayList<>();
    }
    this.careContexts.add(careContextsItem);
    return this;
  }

   /**
   * Get careContexts
   * @return careContexts
  **/
  @javax.annotation.Nullable
  public List<ConsentCareContext> getCareContexts() {
    return careContexts;
  }


  public void setCareContexts(List<ConsentCareContext> careContexts) {
    this.careContexts = careContexts;
  }


  public ConsentDetail purpose(Purpose purpose) {
    
    this.purpose = purpose;
    return this;
  }

   /**
   * Get purpose
   * @return purpose
  **/
  @javax.annotation.Nullable
  public Purpose getPurpose() {
    return purpose;
  }


  public void setPurpose(Purpose purpose) {
    this.purpose = purpose;
  }


  public ConsentDetail hip(IdRequest hip) {
    
    this.hip = hip;
    return this;
  }

   /**
   * Get hip
   * @return hip
  **/
  @javax.annotation.Nullable
  public IdRequest getHip() {
    return hip;
  }


  public void setHip(IdRequest hip) {
    this.hip = hip;
  }


  public ConsentDetail hiu(IdRequest hiu) {
    
    this.hiu = hiu;
    return this;
  }

   /**
   * Get hiu
   * @return hiu
  **/
  @javax.annotation.Nullable
  public IdRequest getHiu() {
    return hiu;
  }


  public void setHiu(IdRequest hiu) {
    this.hiu = hiu;
  }


  public ConsentDetail consentManager(IdRequest consentManager) {
    
    this.consentManager = consentManager;
    return this;
  }

   /**
   * Get consentManager
   * @return consentManager
  **/
  @javax.annotation.Nullable
  public IdRequest getConsentManager() {
    return consentManager;
  }


  public void setConsentManager(IdRequest consentManager) {
    this.consentManager = consentManager;
  }


  public ConsentDetail requester(ConsentRequester requester) {
    
    this.requester = requester;
    return this;
  }

   /**
   * Get requester
   * @return requester
  **/
  @javax.annotation.Nullable
  public ConsentRequester getRequester() {
    return requester;
  }


  public void setRequester(ConsentRequester requester) {
    this.requester = requester;
  }


  public ConsentDetail hiTypes(List<String> hiTypes) {
    
    this.hiTypes = hiTypes;
    return this;
  }

  public ConsentDetail addHiTypesItem(String hiTypesItem) {
    if (this.hiTypes == null) {
      this.hiTypes = new ArrayList<>();
    }
    this.hiTypes.add(hiTypesItem);
    return this;
  }

   /**
   * Get hiTypes
   * @return hiTypes
  **/
  @javax.annotation.Nullable
  public List<String> getHiTypes() {
    return hiTypes;
  }


  public void setHiTypes(List<String> hiTypes) {
    this.hiTypes = hiTypes;
  }


  public ConsentDetail permission(Permission permission) {
    
    this.permission = permission;
    return this;
  }

   /**
   * Get permission
   * @return permission
  **/
  @javax.annotation.Nullable
  public Permission getPermission() {
    return permission;
  }


  public void setPermission(Permission permission) {
    this.permission = permission;
  }


  public ConsentDetail signature(String signature) {
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  public String getSignature() {
    return signature;
  }


  public void setSignature(String signature) {
    this.signature = signature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsentDetail consentDetail = (ConsentDetail) o;
    return Objects.equals(this.schemaVersion, consentDetail.schemaVersion) &&
        Objects.equals(this.consentId, consentDetail.consentId) &&
        Objects.equals(this.patient, consentDetail.patient) &&
        Objects.equals(this.careContexts, consentDetail.careContexts) &&
        Objects.equals(this.purpose, consentDetail.purpose) &&
        Objects.equals(this.hip, consentDetail.hip) &&
        Objects.equals(this.hiu, consentDetail.hiu) &&
        Objects.equals(this.consentManager, consentDetail.consentManager) &&
        Objects.equals(this.requester, consentDetail.requester) &&
        Objects.equals(this.hiTypes, consentDetail.hiTypes) &&
        Objects.equals(this.permission, consentDetail.permission) &&
        Objects.equals(this.signature, consentDetail.signature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaVersion, consentId, patient, careContexts, purpose, hip, hiu, consentManager, requester, hiTypes, permission, signature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsentDetail {\n");
    sb.append("    schemaVersion: ").append(toIndentedString(schemaVersion)).append("\n");
    sb.append("    consentId: ").append(toIndentedString(consentId)).append("\n");
    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    careContexts: ").append(toIndentedString(careContexts)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    hip: ").append(toIndentedString(hip)).append("\n");
    sb.append("    hiu: ").append(toIndentedString(hiu)).append("\n");
    sb.append("    consentManager: ").append(toIndentedString(consentManager)).append("\n");
    sb.append("    requester: ").append(toIndentedString(requester)).append("\n");
    sb.append("    hiTypes: ").append(toIndentedString(hiTypes)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("schemaVersion");
    openapiFields.add("consentId");
    openapiFields.add("patient");
    openapiFields.add("careContexts");
    openapiFields.add("purpose");
    openapiFields.add("hip");
    openapiFields.add("hiu");
    openapiFields.add("consentManager");
    openapiFields.add("requester");
    openapiFields.add("hiTypes");
    openapiFields.add("permission");
    openapiFields.add("signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConsentDetail
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConsentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsentDetail is not found in the empty JSON string", ConsentDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConsentDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsentDetail` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("schemaVersion") != null && !jsonObj.get("schemaVersion").isJsonNull()) && !jsonObj.get("schemaVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaVersion").toString()));
      }
      if ((jsonObj.get("consentId") != null && !jsonObj.get("consentId").isJsonNull()) && !jsonObj.get("consentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentId").toString()));
      }
      // validate the optional field `patient`
      if (jsonObj.get("patient") != null && !jsonObj.get("patient").isJsonNull()) {
        IdRequest.validateJsonObject(jsonObj.getAsJsonObject("patient"));
      }
      if (jsonObj.get("careContexts") != null && !jsonObj.get("careContexts").isJsonNull()) {
        JsonArray jsonArraycareContexts = jsonObj.getAsJsonArray("careContexts");
        if (jsonArraycareContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("careContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `careContexts` to be an array in the JSON string but got `%s`", jsonObj.get("careContexts").toString()));
          }

          // validate the optional field `careContexts` (array)
          for (int i = 0; i < jsonArraycareContexts.size(); i++) {
            ConsentCareContext.validateJsonObject(jsonArraycareContexts.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `purpose`
      if (jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) {
        Purpose.validateJsonObject(jsonObj.getAsJsonObject("purpose"));
      }
      // validate the optional field `hip`
      if (jsonObj.get("hip") != null && !jsonObj.get("hip").isJsonNull()) {
        IdRequest.validateJsonObject(jsonObj.getAsJsonObject("hip"));
      }
      // validate the optional field `hiu`
      if (jsonObj.get("hiu") != null && !jsonObj.get("hiu").isJsonNull()) {
        IdRequest.validateJsonObject(jsonObj.getAsJsonObject("hiu"));
      }
      // validate the optional field `consentManager`
      if (jsonObj.get("consentManager") != null && !jsonObj.get("consentManager").isJsonNull()) {
        IdRequest.validateJsonObject(jsonObj.getAsJsonObject("consentManager"));
      }
      // validate the optional field `requester`
      if (jsonObj.get("requester") != null && !jsonObj.get("requester").isJsonNull()) {
        ConsentRequester.validateJsonObject(jsonObj.getAsJsonObject("requester"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("hiTypes") != null && !jsonObj.get("hiTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hiTypes` to be an array in the JSON string but got `%s`", jsonObj.get("hiTypes").toString()));
      }
      // validate the optional field `permission`
      if (jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) {
        Permission.validateJsonObject(jsonObj.getAsJsonObject("permission"));
      }
      if ((jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) && !jsonObj.get("signature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsentDetail>() {
           @Override
           public void write(JsonWriter out, ConsentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsentDetail read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConsentDetail given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConsentDetail
  * @throws IOException if the JSON string is invalid with respect to ConsentDetail
  */
  public static ConsentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsentDetail.class);
  }

 /**
  * Convert an instance of ConsentDetail to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

